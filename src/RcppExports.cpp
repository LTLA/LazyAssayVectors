// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// check_lazy_vectors
SEXP check_lazy_vectors(Rcpp::List incoming);
RcppExport SEXP _LazyAssayVectors_check_lazy_vectors(SEXP incomingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type incoming(incomingSEXP);
    rcpp_result_gen = Rcpp::wrap(check_lazy_vectors(incoming));
    return rcpp_result_gen;
END_RCPP
}
// create_lazy_vector
SEXP create_lazy_vector(SEXP mat, SEXP dim, SEXP idx, bool getcol, int matclass, int type);
RcppExport SEXP _LazyAssayVectors_create_lazy_vector(SEXP matSEXP, SEXP dimSEXP, SEXP idxSEXP, SEXP getcolSEXP, SEXP matclassSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type mat(matSEXP);
    Rcpp::traits::input_parameter< SEXP >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< SEXP >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< bool >::type getcol(getcolSEXP);
    Rcpp::traits::input_parameter< int >::type matclass(matclassSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(create_lazy_vector(mat, dim, idx, getcol, matclass, type));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_LazyAssayVectors_check_lazy_vectors", (DL_FUNC) &_LazyAssayVectors_check_lazy_vectors, 1},
    {"_LazyAssayVectors_create_lazy_vector", (DL_FUNC) &_LazyAssayVectors_create_lazy_vector, 6},
    {NULL, NULL, 0}
};

void init_lazy_vector(DllInfo* dll);
RcppExport void R_init_LazyAssayVectors(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
    init_lazy_vector(dll);
}
